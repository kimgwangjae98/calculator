으음...
아무래도 가장 힘들었던 가변 인자 *args, 키워드 인자 **kwargs 를 활용하는 방법이었다. 가져온 라이브러리들의 함수 정의를 보면 저 두 인자를 활용한 경우가 많았는데, 이번에 직접 써볼려니 적응이 안되서 힘들었다. 맨날 변수 설정만 했거든. 그런데 이번에 키워드 인자를 직접 써보니까 다른 함수들도 이 키워드 인자써서 조건을 지정하니 편하다 생각되었다. 진짜 키워드 인자는 편리 그 자체다. 물론 정석적인 활용 방법을 몰라 반복문으로 키워드 인자의 값을 추출해냈다. 나중에 더 좋은 코드가 있나 찾아봐야겠다. 이 기술덕에 조건 지정이 편해질 것이다. 그리고 무조건 가변 인자를 쓰기보다는 변수를 더 지정해놔야 편하겠다는 생각이 들었다. 뺄셈이랑 나눗셈 연산을 만들 때 본디 처음엔 원본 값이 변수에 들어갔으면 사람들도 보기 편하고 내가 코딩하기 편했을 것이다. 편리한 방법이 있으면 그것을 나의 것으로 만드는 것도 능력이라 생각했다.
두번째로는 상속과 오버라이딩이다. 아니 힘들지는 않았는데 클래스 상속하고 오버리이딩하는데, 이걸 한 파일에 만들어 놨더니만 다시 분리해서 모듈로 만들라고 하니 힘들었다. 왜냐고? 변수 이름부터 형식까지 통일할려면 한 파일에서 작업하면 편한데 모듈로 하니 파일을 왔다갔다하니 여간 부산스러웠다. 특히 형식맞추기가 힘들었다. 하나하나 지정하는데 오래걸렸다. 리팩터링을 알게 도어서 그나마 편했다. 모듈화 작업도 미리 모듈로 만들면 기존 코드가 어떻게 되는지 생각을 해봐야겠다고 다짐했다. 그랬더니 편했다. 나중에 파일들의 변수를 한번에 바꿀 수있는지 확인해봐야겠다.
사실 두번째는 형식화였고 세번째는 제어문이었다. 제어문 하나로 땡 하면 좋은데 그렇지 않은 경우가 발생해서다. 소수점 맞추기라 실수 변환인데, 둘의 우선순위가 꼬이면 결과가 이상하게 나오는 버그가 발생하기 때문이었다. 그냥 생각만으로 제어문을 만들어 적용하자니 코딩 시간도 길어지고 효율도 좋지 못했다. 그래서 의사 코드로 직접 적어서 견본을 만든 뒤에 차례대로 코드를 작성하니 제대로 동작하고 코딩 시간도 단축할 수 있었다. 강사님께서 말씀하시는 것처럼 미리 적고 시작하는 것이 좋다는 것을 상기했다.
네번째로 추가과제들. 입출력 형식 지정은 내가 임의로 하면 되고 문제는 github 파일 추가와 주석이랑 문서화였다. github 배포용 파일 만들기는 그냥 만들라고 해서 당황스럽고 이게 뭐지 싶었다.라이센스 파일, README 파일, setup파일 등등 궁금하니까 이게 뭔지 찾아보고 이해하고 작성하고 하는데 시간이 꽤나 걸렸다. 인터넷에 검색하고 따라하며 작성했다. 나중에 잊어버릴 수 있으니 인터넷에서 본 내용들 링크를 파일에 붙여넣어 나중에라도 다시 찾아보고 공부할 수 있도록 하였다. 라이센스는 MIT 라이센스로 자유롭게 배포 가능하도록 했고 setup 파일도 형식을 따로 빌려와 프로젝트에 맞춰 수정했고 README 파일도 형식을 자유롭게 해서 적었다. 이건 내 자유니까. 그래도 간결하지 못하다는 점이 마음에 걸렸다.
다섯번째로 형식화. 내가 작성한 코드지만 주석이랑 설명이 부족했다. 그리고 변수 이름 설정도. 왜 힘들었냐면 형시을 몰랐기 때문이다. 문서화 형식도 코드 작성 형식도 몰랐다. 그래서 찾아봤는데 문서화 형식은 PE257 형식이 입출력을 간결하게 표현할 수 있어 채택했고 코딩 스타일은 PEP8을 보편적으로 사용하기에 PEP8을 채택했다. 이 와중에 문서화는 코딩 AI에 도움을 받아 작성했고 형식은 직접 지정해서 하나하나 고쳤다. 리팩터링은 F2를 이용하거나 직접 코드 한 줄 한 줄 마다 주석 추가 - 코드 바꾸기로 바꿨다. 모든 파일에 한번에 적용시키는 방법이 절실히 필요했다. 이거 시간이 꽤 걸리네. 변수 이름은 단어로 지정하고, 띄워쓰기는 필수. 남들이 한눈에 알 정도로 코드를 편하게 만들면 좋다는 것도 알았다. 주석도 간단하게 이해할 수 있을 정도로만. 나중에 코드 짤 때 한줄 치고 주석 한줄 쓰는 형식으로 가야 편할 것 같다.

아무튼 절실히 느낀점은 코드를 잘 만들려면 미리 계획을 다 짜두고 코드를 만들어야 잘 만들어진다는 점이다. 이번 과제도 모든 과정을 먼저 보고 어떻게 작성할지 계획을 세우고, 형식을 지정하고 작성해야 나중에 코드를 고치는데 시간이 단축된고 잘 만들어진다고 절실히 느꼈다. 문서화는 처음이라 AI의 도움을 받았지만 형식과 계획이란 뼈대가 있어야 능률이 오른다는 점도 이번에 알게 되었다. 특히 의사코드. 지금은 처음이라 어려울지는 몰라도 나중에는 다른사람들이 봐도 한번에 이해할 수 있는 코드를 짤 것이다.

고려해야할 사항
1. 입출력 형식(통일 필요, not any)
2. 변수 이름 지정
3. 문서화 형식(PE257)
4. 주석 달기(간단히)
5. 클래스, 매서드, 함수 형식 통일( 그래야 유지보수 편해져)
6. 의사 코드로 계획 세우기
7. 라이센스 같은 부가 파일
8. 환경 설정
9. github 연동
10. 테스트 및 데모 파일 작성(동작확인)
11. 오탈자 검수
12. 키워드 초기값 설정(가능하다면)
